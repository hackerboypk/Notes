session 1 
<<<Single node kubernate Clustor using minikube>> only use in developement or learning purpose not used in production
======
Install miniqube
for windows > check systeminfo >> Hyper -v Requirements should be all yes
download minikube for windows minikube-windows-amd64.exe
install kubectl
create folder in c drive with kubernates and paste downloaded minikube and kubectl
copy path c:/kubernates
advance system setting set environment varible user variable path and paste location
done
rename file in c:/kubernates minkube-windows-amd64.exe to minikube
now run command minikube
it will show the help menu

minikube start >> it will create vm in which kubernate cluster will be setup
done 
kubernates are setup in vm 
kubectl >> kubernates client which help to run commands or operations on kubernate clustor
kubectl get pods >> it will show the pods running
minikube ip >> it will show ip of our running minikube vm
minikube ssh >> it will give ssh access
minikube ssh username = docker
minikube ssh password = tcuser
how to provide dashboard to minikube >> minikube dashboard  command
=======================================================================================
session2
3-node kubernates clustor in vm
we need kubernates master, k8 worker1, k8 worker2. 3 virtual machines
all vm have at least 2 cpu 
all vm are in same network should be able to ping each other
go to vm file preferences>network>addnetwork>network name>ok
vm node setting network selct from list
check ip address of all vms and note down
ssh all 3 vm in ubuntu or kali or wsl this node must be able to ping all 3 vms
ssh username@ip enter then password
every node must have swapoff
to check free -h in all 3 nodes
to disable or off swap > swapoff -a try as root user
this is temporary to make it permananat we need to add in fstab
vim /etc/fstab
commet all lines start with swap in all nodes
we need to install docker in all 3 nodes but note that we should check which version
of docker is supported by k8s to check that follow k8s documentation
install docker in all vms version 19.
sudo cat /sys/class/dmi/id/product_uuid this should be unique in all node
iptables for ubuntu 19.04 or later  
*sudo apt-get update
sudo apt-get install -y apt-transport-https ca-certificates curl

*sudo curl -fsSLo /etc/apt/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg

*echo "deb [signed-by=/etc/apt/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list

*sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

do this in all nodes



master setup using kubeadm

kubeadm init --pod-network-cidr=10.244.0.0/16

kubectl get nodes to show the nodes in my cluster 
it will not work we need to enter commands to start our cluster
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernates/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(is -g) $HOME/.kube/config

kubectl get nodes >> it will show our nodes in clustor

get pods -A

kubectl apply funnel networking 
get pods -A

kubeadm join wali command copy and paste in worker nodes

kubectl get nodes on master to check all nodes are ready or not



✔𝗣𝗼𝗱: A Pod is the smallest and most basic unit in Kubernetes. It represents a single instance of a running process or a set of tightly coupled processes running together on a node. Pods are scheduled and managed by Kubernetes.

✔𝗖𝗹𝘂𝘀𝘁𝗲𝗿: A cluster is a collection of nodes that function as a single entity. It represents every element of the Kubernetes system, including the worker nodes and the control plane parts.

✔𝗡𝗼𝗱𝗲: A Node is a Kubernetes cluster's worker computer. Either a real or virtual machine may be used. The operating and management of the pods is done by the nodes.

✔𝗖𝗼𝗻𝘁𝗿𝗼𝗹-𝗣𝗹𝗮𝗻𝗲: The Kubernetes cluster is managed and controlled by a group of components known as the control plane. It contains the controller manager, scheduler, etcd, and API server.

✔ 𝗲𝘁𝗰𝗱: Kubernetes uses the distributed key-value store etcd to store configuration and cluster data. For storing cluster state, it offers a dependable and highly accessible data store.

✔𝗦𝗰𝗵𝗲𝗱𝘂𝗹𝗲𝗿: The Scheduler is in charge of allocating pods to nodes in accordance with resource needs, node availability, and other limitations. It selects the appropriate node for scheduling a pod.

✔𝗖𝗼𝗻𝘁𝗿𝗼𝗹𝗹𝗲𝗿-𝗠𝗮𝗻𝗮𝗴𝗲𝗿: A group of controllers known as the Controller Manager which manages various cluster components. The Node Controller, Replication Controller, and Service Controller are a few examples. They make sure that the cluster's desired and actual states are same.

✔𝗦𝗲𝗿𝘃𝗶𝗰𝗲: A logical set of pods and a policy for accessing them are defined by a service, which is an abstraction. For the pods behind it, it offers a reliable network endpoint (IP address) and load balancing.

✔𝗥𝗲𝗽𝗹𝗶𝗰𝗮𝗦𝗲𝘁: ReplicaSets are Kubernetes objects that guarantee a certain number of pod replicas are active at all times. Scaling and managing the number of pods for a certain application are done using it.

✔𝗡𝗮𝗺𝗲𝘀𝗽𝗮𝗰𝗲: The cluster resources can be split up into virtual clusters using namespaces. It gives names a range and enables many teams or projects to share the same physical cluster while isolating their resources.












